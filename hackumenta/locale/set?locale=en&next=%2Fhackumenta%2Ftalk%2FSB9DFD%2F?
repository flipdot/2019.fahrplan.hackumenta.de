



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Was andere Sprachen von TypeScript lernen können ::  Hackumenta :: pretalx</title>
    <meta name="title" content="Was andere Sprachen von TypeScript lernen können  - Hackumenta pretalx">
    <meta name="description" content="TypeScript erfreut sich in der Webentwicklung immer größerer Beliebtheit – aber warum eigentlich? Welche Konzepte würden auch in andere Sprachen ganz gut passen und wie kann man anders über Typen denken?
In diesem Talk geht es um fortgeschrittene Typisierung in TypeScript anhand von Live-Demos. Wir schauen uns an, wie Fehlerklassen schon vor dem Ausführen des Codes ausgeschlossen werden können. Verwenden werden wir dabei u. A. Union Types, Literal Types, Mapped Types und kontrollflussbasierte Typen.

Dir sagt das nicht viel? Dieser Talk ist dazu da, dich mit diesen Konzepten vertraut zu machen.

**Voraussetzungen**: Ein grundlegendes Verständnis von Programmierung, „Was macht ein Compiler?“ und statischer Typisierung. Von Vorteil wären JavaScript-Kenntnisse.">
    <meta name="application-name" content="pretalx">
    <meta name="generator" content="pretalx">
    <meta name="keywords" content="Hackumenta, hackumenta, 2019, schedule, talks, cfp, call for papers, conference, submissions, organizer">
    <meta name="referrer" content="origin-when-crossorigin">
    <meta name="robots" content="index, follow">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="theme-color" content="#111111">
    <meta name="HandheldFriendly" content="True"/>

    <meta property="og:title" content="Was andere Sprachen von TypeScript lernen können Hackumenta">
    <meta property="og:description" content="TypeScript erfreut sich in der Webentwicklung immer größerer Beliebtheit – aber warum eigentlich? Welche Konzepte würden auch in andere Sprachen ganz gut passen und wie kann man anders über Typen denken?
In diesem Talk geht es um fortgeschrittene Typisierung in TypeScript anhand von Live-Demos. Wir schauen uns an, wie Fehlerklassen schon vor dem Ausführen des Codes ausgeschlossen werden können. Verwenden werden wir dabei u. A. Union Types, Literal Types, Mapped Types und kontrollflussbasierte Typen.

Dir sagt das nicht viel? Dieser Talk ist dazu da, dich mit diesen Konzepten vertraut zu machen.

**Voraussetzungen**: Ein grundlegendes Verständnis von Programmierung, „Was macht ein Compiler?“ und statischer Typisierung. Von Vorteil wären JavaScript-Kenntnisse.">
    <meta property="og:url" content="https://fahrplan.2019.hackumenta.de/hackumenta/talk/SB9DFD/">
    <meta property="twitter:card" content="summary">

    <link rel="icon" type="image/png" sizes="32x32" href="/static/common/img/favicon-32x32.816e12963927.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/static/common/img/favicon-16x16.b1e178982893.png">

    <link rel="stylesheet" type="text/css" href="/static/common/scss/uncompressed.ec8d16cc3696.css" />

        <link rel="stylesheet" type="text/css" href="/static/vendored/fullcalendar/fullcalendar.min.ba055a2cd2b3.css"/>
        <link rel="stylesheet" type="text/css" href="/media/hackumenta/cfp.a7a546b001c9a7ef.css"/>
        <link rel="stylesheet" type="text/css" href="/media/hackumenta/agenda.620868bb75bcc591.css"/>

    <link rel="stylesheet" type="text/css" href="/media/hackumenta/css/gradientheader.css"/>
    <script type="text/javascript" src="/static/CACHE/js/output.3cf410ab2389.js" defer></script>

    <link rel="alternate" type="application/atom+xml" title="Hackumenta Schedule Versions" href="/hackumenta/schedule/feed.xml" />



</head>
<body>
    <div id="top-bg" class="header bubbles">

        <img src="/media/hackumenta/img/map_transparent.f15411f8.svg_FNxp49c.png" id="header-image">

    </div>

    <div class="container" id="main-container">
        <header>
            <h1>
                <a href="
/hackumenta/schedule/
">

                        Hackumenta

                </a>
            </h1>
            <div class="d-flex" id="header-row">

                <div class="locales">

                        <a href="/hackumenta/locale/set?locale=en&next=/hackumenta/talk/SB9DFD/%3F"
                                class="active">English</a>

                        <a href="/hackumenta/locale/set?locale=de&next=/hackumenta/talk/SB9DFD/%3F"
                                class="">Deutsch</a>

                    •&nbsp;
                </div>


                <a href="/hackumenta/login/">login</a>

            </div>
        </header>
        <div class="card" id="main-card">
            <main>


                        <div class="alert alert-success">
                            Your locale preferences have been saved. We like to think that we have excellent support for English in pretalx, but if you encounter issues or errors, please contact us!
                        </div>






<article>
    <h3 class="talk-title">
        <div class="heading-with-buttons">
        Was andere Sprachen von TypeScript lernen können
        <div class="buttons" id="talk-buttons">

            <a class="btn btn-outline-primary" href="/hackumenta/talk/SB9DFD.ics">
                <i class="fa fa-calendar"></i> .ical
            </a>


                <a href="/hackumenta/talk/SB9DFD/feedback/"
                        class="btn btn-success">
                    <i class="fa fa-comments"></i> Feedback
                </a>


        </div>
        </div>
        <small>

                2019-10-04, 18:45–19:30, Proxima b


        </small>
    </h3>
    <div class="talk row">
        <div class="talk-content col-lg-8 col-md-6 col-xs-12">


            <section class="abstract">
                <p>Advanced Types in TypeScript und was andere Sprachen davon gebrauchen könnten.</p>
            </section>

            <hr />

            <section class="description">
                <p>TypeScript erfreut sich in der Webentwicklung immer größerer Beliebtheit – aber warum eigentlich? Welche Konzepte würden auch in andere Sprachen ganz gut passen und wie kann man anders über Typen denken?<br>
In diesem Talk geht es um fortgeschrittene Typisierung in TypeScript anhand von Live-Demos. Wir schauen uns an, wie Fehlerklassen schon vor dem Ausführen des Codes ausgeschlossen werden können. Verwenden werden wir dabei u. A. Union Types, Literal Types, Mapped Types und kontrollflussbasierte Typen.</p>
<p>Dir sagt das nicht viel? Dieser Talk ist dazu da, dich mit diesen Konzepten vertraut zu machen.</p>
<p><strong>Voraussetzungen</strong>: Ein grundlegendes Verständnis von Programmierung, „Was macht ein Compiler?“ und statischer Typisierung. Von Vorteil wären JavaScript-Kenntnisse.</p>
            </section>

            </section>

        </div>
        <aside class="col-lg-4 col-md-6 col-xs-12">


            <div class="speakers">
                <div class="speaker-header">

                        Speaker

                </div>

                    <div class="speaker">
                        <a href="/hackumenta/speaker/VPHY8Y/">
                            <div class="name">
                                nikeee
                            </div>
                        </a>
                        <div class="info">

                                <span class="speaker-talk">
                                    This speaker also holds:
                                    "<a href='/hackumenta/talk/FHX9QA/'>Wie zählt $BIG_SITE eigentlich Seitenaufrufe?</a>".
                                </span>

                        </div>
                    </div>

            </div>


            <div class="speakers">
                <strong>Language:</strong> German
            </div>

        </aside>
    </div>
</article>


            </main>
        </div>
        <footer>

            <a href="http://pretalx.com" target="_blank" rel="noopener">
                <img src="/static/common/img/logo.c86a874657c9.svg" alt="The pretalx logo">
            </a>

                &middot;
                <a href="mailto:0xa@flipdot.org">Contact us</a>


        </footer>
    </div>
</body>
</html>
